리튼(litten) 크로스플랫폼 노트 앱 백엔드 설계서

================================================================================

1. 백엔드 아키텍처 개요

1.1 전체 시스템 아키텍처

┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Flutter App   │    │    Web App      │    │  Desktop App    │
│  (iOS/Android)  │    │   (Browser)     │    │ (Win/Mac/Linux) │
└─────────────────┘    └─────────────────┘    └─────────────────┘
         │                       │                       │
         └───────────────────────┼───────────────────────┘
                                 │
                    ┌─────────────────┐
                    │   API Gateway   │
                    │   (Rate Limit)  │
                    └─────────────────┘
                                 │
                    ┌─────────────────┐
                    │  Load Balancer  │
                    └─────────────────┘
                                 │
         ┌───────────────────────┼───────────────────────┐
         │                       │                       │
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Auth Service  │    │   Note Service  │    │   File Service  │
│   (App ID 관리)  │    │   (CRUD/동기화) │    │  (업로드/다운로드)│
└─────────────────┘    └─────────────────┘    └─────────────────┘
         │                       │                       │
         └───────────────────────┼───────────────────────┘
                                 │
                    ┌─────────────────┐
                    │    MariaDB      │
                    │   (Primary DB)  │
                    └─────────────────┘

1.2 기술 스택

**Backend Framework**
- Java Spring Boot 3.x
- Java 17+ (LTS)
- Spring Security (JWT + 앱 ID 인증)
- Spring Data JPA (데이터베이스 접근)
- Spring Web (RESTful API)

**Database & Storage**
- MariaDB 10.11+ (메인 데이터베이스)
- Redis (캐시/세션 관리)
- AWS S3 (파일 저장소)

**Infrastructure**
- Docker (컨테이너화)
- Nginx (로드 밸런서/API Gateway)
- AWS EC2/ECS (배포 환경)

1.3 핵심 설계 원칙
- 앱 ID 기반 인증: 로그인 없는 익명 사용자 지원
- RESTful API: 표준 HTTP 메서드와 상태 코드 사용
- 마이크로서비스: 기능별 독립적인 서비스 분리
- 확장성: 수평 확장 가능한 무상태 서비스
- 보안성: 데이터 암호화 및 API 키 기반 인증
- 다국어: 30개 언어 지원

================================================================================

2. 데이터베이스 설계

2.1 테이블 구조

-- 앱 등록 정보
CREATE TABLE apps (
    app_id VARCHAR(100) PRIMARY KEY,           -- litten_{UUID}_{timestamp}
    api_key VARCHAR(256) NOT NULL,             -- 암호화된 API 키
    subscription_type VARCHAR(20) DEFAULT 'free', -- free, premium
    language_code VARCHAR(10) DEFAULT 'ko',       -- 사용자 언어 설정
    theme_preference VARCHAR(30) DEFAULT 'classic_blue', -- 선호 테마 (5가지)
    created_at TIMESTAMP DEFAULT NOW(),
    last_accessed TIMESTAMP DEFAULT NOW(),
    is_active BOOLEAN DEFAULT true
);

-- 노트(리튼) 정보
CREATE TABLE notes (
    note_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    app_id VARCHAR(100) REFERENCES apps(app_id) ON DELETE CASCADE,
    title VARCHAR(200) NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    is_deleted BOOLEAN DEFAULT false,
    sort_order INTEGER DEFAULT 0
);

-- 파일 정보
CREATE TABLE files (
    file_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    note_id UUID REFERENCES notes(note_id) ON DELETE CASCADE,
    app_id VARCHAR(100) REFERENCES apps(app_id) ON DELETE CASCADE,
    file_type VARCHAR(20) NOT NULL CHECK (
        file_type IN ('listening', 'text', 'handwriting', 'annotation', 'converted_image')
    ),                                         -- 'listening', 'text', 'handwriting', 'annotation', 'converted_image'
    original_file_type VARCHAR(20),           -- 원본 파일 형식 (pdf, doc, ppt 등)
    file_name VARCHAR(255) NOT NULL,
    file_size BIGINT,
    file_url VARCHAR(500),                     -- S3 URL
    thumbnail_url VARCHAR(500),               -- 썸네일 URL (이미지 파일용)
    metadata JSONB,                            -- 추가 메타데이터 (페이지 수, 해상도, 음성 동기화 정보 등)
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW(),
    is_deleted BOOLEAN DEFAULT false
);

-- 동기화 상태
CREATE TABLE sync_states (
    sync_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    app_id VARCHAR(100) REFERENCES apps(app_id) ON DELETE CASCADE,
    last_sync_timestamp TIMESTAMP DEFAULT NOW(),
    client_version VARCHAR(50),
    device_info JSONB
);

-- 파일 주석 정보 (필기, 하이라이트, 텍스트 주석 등)
CREATE TABLE file_annotations (
    annotation_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    file_id UUID REFERENCES files(file_id) ON DELETE CASCADE,
    app_id VARCHAR(100) REFERENCES apps(app_id) ON DELETE CASCADE,
    annotation_type VARCHAR(20) NOT NULL CHECK (
        annotation_type IN ('highlight', 'text_note', 'drawing', 'shape', 'sticker')
    ),                                         -- 주석 타입
    page_number INTEGER DEFAULT 1,            -- 페이지 번호 (PDF 등 다중 페이지 지원)
    position_data JSONB NOT NULL,             -- 위치 정보 {x, y, width, height}
    content TEXT,                             -- 텍스트 주석 내용
    style_data JSONB,                         -- 스타일 정보 {color, thickness, opacity}
    drawing_data JSONB,                       -- 드로잉 경로 데이터 (SVG 형식)
    audio_timestamp DECIMAL(10,3),           -- 음성 동기화 시간 (초 단위, 예: 123.456)
    linked_audio_file_id UUID REFERENCES files(file_id), -- 연결된 음성 파일 ID
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- 사용량 통계 (3단계 제한 시스템)
CREATE TABLE usage_stats (
    app_id VARCHAR(100) PRIMARY KEY REFERENCES apps(app_id) ON DELETE CASCADE,
    note_count INTEGER DEFAULT 0,
    listening_count INTEGER DEFAULT 0,
    writing_count INTEGER DEFAULT 0,           -- 텍스트 + 필기 + 주석 파일 통합 카운트
    total_file_size BIGINT DEFAULT 0,
    updated_at TIMESTAMP DEFAULT NOW()
);

-- 3단계 구독별 사용량 제한
-- 무료(Free): 리튼 최대 5개, 각 리튼내에 듣기 파일 최대 2개, 쓰기 텍스트 1개, 필기 1개
-- 스탠다드(Standard): 파일 수 제한 없음
-- 프리미엄(Premium): 로그인 및 파일 서버 보관, 웹에서 편집 가능

2.2 인덱스 설계
-- 성능 최적화를 위한 인덱스
CREATE INDEX idx_notes_app_id ON notes(app_id);
CREATE INDEX idx_notes_updated_at ON notes(updated_at);
CREATE INDEX idx_files_note_id ON files(note_id);
CREATE INDEX idx_files_app_id ON files(app_id);
CREATE INDEX idx_files_type ON files(file_type);
CREATE INDEX idx_files_original_type ON files(original_file_type);
CREATE INDEX idx_annotations_file_id ON file_annotations(file_id);
CREATE INDEX idx_annotations_app_id ON file_annotations(app_id);
CREATE INDEX idx_annotations_type ON file_annotations(annotation_type);
CREATE INDEX idx_annotations_page ON file_annotations(page_number);
CREATE INDEX idx_sync_states_app_id ON sync_states(app_id);

2.3 데이터 보존 정책
-- 삭제된 데이터 보존 기간: 30일
-- 비활성 앱 데이터 보존: 1년
-- 로그 데이터 보존: 90일

================================================================================

3. API 엔드포인트 설계

3.1 인증 API

POST /api/v1/auth/register
# 앱 등록 및 고유 ID 발급 (시스템 언어 자동 감지 및 국가별 테마 자동 선택)
Request:
{
  "device_info": {
    "platform": "android",
    "version": "1.0.0",
    "locale": "ko",
    "country_code": "KR"
  }
}

Response:
{
  "success": true,
  "data": {
    "app_id": "litten_550e8400-e29b-41d4-a716-446655440000_1703123456",
    "api_key": "sk_live_abc123...",
    "subscription_type": "free",
    "language_code": "ko",
    "theme_preference": "classic_blue",
    "auto_detected_settings": {
      "detected_language": "ko",
      "detected_country": "KR",
      "auto_theme_mapping": {
        "region": "asia",
        "preferred_theme": "classic_blue",
        "mapping_rule": "아시아권(KR, JP, CN): Classic Blue"
      }
    }
  }
}

GET /api/v1/auth/verify
# 앱 ID 유효성 검증
Headers: Authorization: Bearer {api_key}
Response:
{
  "success": true,
  "data": {
    "app_id": "litten_...",
    "subscription_type": "free",
    "is_active": true
  }
}

PUT /api/v1/auth/refresh
# API 키 갱신
Headers: Authorization: Bearer {api_key}
Response:
{
  "success": true,
  "data": {
    "api_key": "sk_live_new123...",
    "expires_in": 2592000
  }
}

3.2 노트 관리 API

GET /api/v1/notes
# 노트 목록 조회
Headers: Authorization: Bearer {api_key}
Query: ?limit=20&offset=0&sort=updated_at&order=desc

Response:
{
  "success": true,
  "data": {
    "notes": [
      {
        "note_id": "uuid-1234",
        "title": "회의록",
        "description": "업무 관련 내용들...",
        "file_counts": {
          "listening": 2,
          "writing": 4
        },
        "created_at": "2024-12-01T14:30:00Z",
        "updated_at": "2024-12-01T15:45:00Z"
      }
    ],
    "total": 5,
    "has_more": false
  }
}

POST /api/v1/notes
# 새 노트 생성
Headers: Authorization: Bearer {api_key}
Request:
{
  "title": "새 노트",
  "description": "노트 설명"
}

Response:
{
  "success": true,
  "data": {
    "note_id": "uuid-5678",
    "title": "새 노트",
    "description": "노트 설명",
    "created_at": "2024-12-01T16:00:00Z"
  }
}

PUT /api/v1/notes/{note_id}
# 노트 업데이트
Headers: Authorization: Bearer {api_key}
Request:
{
  "title": "수정된 제목",
  "description": "수정된 설명"
}

DELETE /api/v1/notes/{note_id}
# 노트 삭제 (소프트 삭제)
Headers: Authorization: Bearer {api_key}

3.3 파일 관리 API

POST /api/v1/files/upload
# 파일 업로드
Headers: 
  Authorization: Bearer {api_key}
  Content-Type: multipart/form-data

Form Data:
  file: [binary]
  note_id: uuid-1234
  file_type: listening  # listening, text, handwriting, annotation, converted_image
  original_file_type: pdf  # (선택사항) 원본 파일 형식
  metadata: {"duration": 120, "format": "m4a", "pages": 5, "audio_sync_enabled": true}

Response:
{
  "success": true,
  "data": {
    "file_id": "uuid-file-1",
    "file_name": "recording_20241201_143027.m4a",
    "file_url": "https://cdn.litten.app/files/...",
    "file_size": 1024000,
    "uploaded_at": "2024-12-01T14:30:27Z"
  }
}

GET /api/v1/files/{file_id}
# 파일 다운로드
Headers: Authorization: Bearer {api_key}

Response: 
# 파일 바이너리 데이터 또는 리다이렉트 URL

DELETE /api/v1/files/{file_id}
# 파일 삭제
Headers: Authorization: Bearer {api_key}

GET /api/v1/notes/{note_id}/files
# 노트의 파일 목록 조회
Headers: Authorization: Bearer {api_key}
Query: ?type=recording&limit=10

Response:
{
  "success": true,
  "data": {
    "files": [
      {
        "file_id": "uuid-file-1",
        "file_name": "recording_20241201_143027.m4a",
        "file_type": "recording",
        "file_size": 1024000,
        "metadata": {"duration": 120, "format": "m4a"},
        "created_at": "2024-12-01T14:30:27Z"
      }
    ]
  }
}

3.4 파일 변환 API

POST /api/v1/files/convert
# 파일 변환 (PDF, DOC, PPT → JPEG)
Headers: 
  Authorization: Bearer {api_key}
  Content-Type: multipart/form-data

Form Data:
  file: [binary]
  note_id: uuid-1234
  convert_to: jpeg  # jpeg, png
  quality: 90       # 변환 품질 (1-100)

Response:
{
  "success": true,
  "data": {
    "job_id": "uuid-job-1",
    "status": "processing",
    "estimated_time": 30,
    "message": "파일 변환이 시작되었습니다."
  }
}

GET /api/v1/files/convert/{job_id}
# 변환 작업 상태 확인
Headers: Authorization: Bearer {api_key}

Response:
{
  "success": true,
  "data": {
    "job_id": "uuid-job-1",
    "status": "completed",  # processing, completed, failed
    "progress": 100,
    "converted_files": [
      {
        "file_id": "uuid-file-1",
        "page_number": 1,
        "file_url": "https://cdn.litten.app/converted/page_1.jpg"
      },
      {
        "file_id": "uuid-file-2", 
        "page_number": 2,
        "file_url": "https://cdn.litten.app/converted/page_2.jpg"
      }
    ]
  }
}

3.5 주석 관리 API

GET /api/v1/files/{file_id}/annotations
# 파일의 주석 목록 조회
Headers: Authorization: Bearer {api_key}
Query: ?page=1&annotation_type=highlight

Response:
{
  "success": true,
  "data": {
    "annotations": [
      {
        "annotation_id": "uuid-annotation-1",
        "annotation_type": "highlight",
        "page_number": 1,
        "position_data": {
          "x": 100, "y": 200, "width": 150, "height": 20
        },
        "style_data": {
          "color": "#ffff00", "opacity": 0.5
        },
        "created_at": "2024-12-01T14:30:00Z"
      },
      {
        "annotation_id": "uuid-annotation-2",
        "annotation_type": "text_note",
        "page_number": 1,
        "position_data": {
          "x": 300, "y": 400, "width": 100, "height": 50
        },
        "content": "중요한 포인트",
        "style_data": {
          "font_size": 14, "color": "#000000"
        },
        "created_at": "2024-12-01T14:35:00Z"
      }
    ]
  }
}

POST /api/v1/files/{file_id}/annotations
# 주석 추가
Headers: Authorization: Bearer {api_key}
Request:
{
  "annotation_type": "drawing",
  "page_number": 1,
  "position_data": {
    "x": 150, "y": 250, "width": 200, "height": 100
  },
  "style_data": {
    "color": "#ff0000", "thickness": 3
  },
  "drawing_data": {
    "path": "M150,250 L200,300 L350,350",
    "type": "freehand"
  },
  "audio_timestamp": 145.230,
  "linked_audio_file_id": "uuid-audio-file-1"
}

Response:
{
  "success": true,
  "data": {
    "annotation_id": "uuid-annotation-3",
    "created_at": "2024-12-01T15:00:00Z"
  }
}

PUT /api/v1/annotations/{annotation_id}
# 주석 수정
Headers: Authorization: Bearer {api_key}
Request:
{
  "content": "수정된 주석 내용",
  "style_data": {
    "color": "#0000ff"
  }
}

DELETE /api/v1/annotations/{annotation_id}
# 주석 삭제
Headers: Authorization: Bearer {api_key}

3.6 동기화 API

GET /api/v1/sync/status
# 동기화 상태 확인
Headers: Authorization: Bearer {api_key}
Query: ?since=2024-12-01T14:00:00Z

Response:
{
  "success": true,
  "data": {
    "last_sync": "2024-12-01T15:30:00Z",
    "server_time": "2024-12-01T16:00:00Z",
    "has_changes": true,
    "change_count": 5
  }
}

POST /api/v1/sync/delta
# 델타 동기화
Headers: Authorization: Bearer {api_key}
Request:
{
  "last_sync": "2024-12-01T14:00:00Z",
  "client_changes": [
    {
      "type": "note",
      "action": "update",
      "id": "uuid-1234",
      "data": {"title": "새 제목"},
      "timestamp": "2024-12-01T15:00:00Z"
    }
  ]
}

Response:
{
  "success": true,
  "data": {
    "server_changes": [
      {
        "type": "file",
        "action": "create",
        "id": "uuid-file-2",
        "data": {
          "file_name": "new_file.txt",
          "note_id": "uuid-1234"
        },
        "timestamp": "2024-12-01T15:15:00Z"
      }
    ],
    "conflicts": [],
    "sync_timestamp": "2024-12-01T16:00:00Z"
  }
}

3.7 3단계 구독 정보 API

GET /api/v1/subscription/info
# 구독 정보 조회
Headers: Authorization: Bearer {api_key}

Response:
{
  "success": true,
  "data": {
    "subscription_type": "free",
    "current_usage": {
      "notes": 2,
      "max_notes": 5,
      "listening_files": 1,
      "max_listening_files": 2,
      "writing_files": 1,
      "max_writing_files": 1,
      "handwriting_files": 0,
      "max_handwriting_files": 1
    },
    "subscription_plans": {
      "free": {
        "name": "무료 (Free)",
        "price": 0,
        "limits": {
          "max_notes": 5,
          "max_listening_files_per_note": 2,
          "max_writing_files_per_note": 1,
          "max_handwriting_files_per_note": 1
        },
        "features": ["기본 기능", "광고 표시", "로컬 저장"]
      },
      "standard": {
        "name": "스탠다드 (Standard)",
        "price": 4900,
        "currency": "KRW",
        "description": "월 4,900원",
        "limits": null,
        "features": ["파일 수 제한 없음", "광고 제거", "클라우드 동기화"]
      },
      "premium": {
        "name": "프리미엄 (Premium)",
        "price": 9900,
        "currency": "KRW",
        "description": "월 9,900원",
        "limits": null,
        "features": ["로그인 및 파일 서버 보관", "웹에서 편집 가능", "모든 고급 기능"]
      }
    },
    "upgrade_url": "https://payment.litten.app/upgrade"
  }
}

================================================================================

4. 서비스 레이어 설계

4.1 AuthService (인증 서비스)

앱 등록, API 키 검증, 구독 상태 관리를 담당합니다.

주요 기능:
- 앱 고유 ID 생성 (litten_{uuid}_{timestamp} 형식)
- API 키 생성 및 암호화 저장
- API 키 유효성 검증
- 구독 타입 변경 (free → premium)

4.2 NoteService (노트 관리 서비스)

노트(리튼) CRUD 및 사용량 통계를 관리합니다.

주요 기능:
- 노트 목록 조회 (페이지네이션)
- 노트 생성/수정/삭제 (소프트 삭제)
- 파일 수 집계 (listening, writing - 텍스트/필기/주석 통합)
- 사용량 통계 수집 (분석 목적)

4.3 FileService (파일 관리 서비스)

파일 업로드/다운로드 및 S3 저장소를 관리합니다.

주요 기능:
- S3 파일 업로드/다운로드
- 파일 메타데이터 추출 및 저장 (페이지 수, 해상도 등)
- 개별 파일 크기 확인 (최대 10MB)
- Presigned URL 생성 (보안 다운로드)
- 썸네일 생성 (이미지 파일용)

4.4 ConversionService (파일 변환 서비스)

문서 파일을 이미지로 변환하여 주석 기능을 지원합니다.

주요 기능:
- PDF, DOC, PPT → JPEG/PNG 변환
- 비동기 변환 작업 큐 관리
- 변환 진행 상태 추적
- 변환된 파일의 페이지별 관리
- 변환 품질 최적화

4.5 AnnotationService (주석 관리 서비스)

파일에 대한 주석(하이라이트, 텍스트, 드로잉) 기능을 제공합니다.

주요 기능:
- 주석 CRUD (생성, 조회, 수정, 삭제)
- 주석 타입별 처리 (하이라이트, 텍스트, 드로잉, 도형, 스티커)
- 페이지별 주석 관리
- 주석 데이터 검증 (위치, 스타일, 드로잉 경로)
- 주석 성능 최적화

4.6 SyncService (동기화 서비스)

클라이언트-서버 간 델타 동기화를 처리합니다.

주요 기능:
- 델타 동기화 (변경사항만 전송)
- 충돌 해결 (서버 우선 정책)
- 동기화 상태 추적
- 오프라인 변경사항 처리
- 주석 데이터 실시간 동기화

================================================================================

5. 보안 설계

5.1 API 키 기반 인증
- sk_live_ 접두사를 가진 64자리 랜덤 키
- AES-256-CBC 암호화로 데이터베이스 저장
- Bearer 토큰 방식으로 헤더 전송

5.2 데이터 암호화
- 민감한 데이터: AES-256-GCM 암호화
- 파일 저장: S3 서버 사이드 암호화
- 통신: HTTPS 강제 적용

5.3 접근 제어
- 앱별 데이터 완전 격리
- Rate Limiting (15분간 1000회 제한)
- 파일 접근 권한 검증
- CORS 정책 적용

================================================================================

6. 파일 저장 구조

6.1 S3 버킷 구조

litten-files-production/
├── apps/
│   └── {app_id}/
│       └── notes/
│           └── {note_id}/
│               ├── recordings/
│               │   ├── recording_20241201_143027.m4a
│               │   └── recording_20241201_143028.wav
│               ├── writings/
│               │   ├── texts/
│               │   │   ├── text_20241201_143027.txt
│               │   │   └── note_20241201_143028.md
│               │   ├── handwritings/
│               │   │   ├── sketch_20241201_143027.png
│               │   │   └── drawing_20241201_143028.svg
│               │   ├── annotations/
│               │   │   ├── annotated_doc_20241201_143027.jpg
│               │   │   └── highlighted_pdf_20241201_143028.jpg
│               │   └── converted/
│               │       ├── original_document.pdf
│               │       ├── page_01.jpg
│               │       ├── page_02.jpg
│               │       └── thumbnails/
│               │           ├── page_01_thumb.jpg
│               │           └── page_02_thumb.jpg

6.2 CDN 및 캐싱
- CloudFront 글로벌 CDN
- 1년 캐싱 정책
- Gzip 압축 활성화
- 보안 헤더 추가

================================================================================

7. 성능 최적화

7.1 데이터베이스 최적화
- 연결 풀 (최대 20개 연결)
- 적절한 인덱스 설계
- 쿼리 최적화 (JOIN 최소화)
- 페이지네이션 적용

7.2 캐싱 전략
- Redis 캐싱
- 앱 정보: 1시간 캐싱
- 노트 목록: 5분 캐싱
- 사용량 정보: 1분 캐싱

7.3 비동기 처리
- Bull 큐 시스템
- 파일 메타데이터 추출
- 문서 파일 변환 (PDF→JPEG 등)
- 썸네일 생성
- 주석 데이터 처리
- 이메일 전송
- 통계 데이터 생성

================================================================================

8. 배포 및 인프라

8.1 컨테이너화
- Docker 기반 컨테이너
- Node.js 18 Alpine 이미지
- 멀티 스테이지 빌드

8.2 AWS 인프라
- ECS Fargate (컨테이너 오케스트레이션)
- Application Load Balancer
- RDS MariaDB (Multi-AZ)
- ElastiCache Redis
- CloudWatch 모니터링

8.3 CI/CD 파이프라인
- GitHub Actions
- ECR 이미지 저장소
- 자동 배포 및 롤백

================================================================================

9. 모니터링 및 로깅

9.1 애플리케이션 모니터링
- API 응답 시간 추적
- 에러율 모니터링
- 사용량 통계 수집

9.2 인프라 모니터링
- CPU/메모리 사용률
- 데이터베이스 성능
- 네트워크 트래픽

9.3 로깅 시스템
- 구조화된 JSON 로그
- 중앙 집중식 로그 수집
- 90일 로그 보존

================================================================================

10. 확장성 고려사항

10.1 수평 확장
- 무상태 API 서버
- 로드 밸런서 기반 분산
- 데이터베이스 읽기 복제본

10.2 글로벌 확장
- 다중 리전 배포
- 지역별 CDN 엣지 로케이션
- 지연 시간 최적화

================================================================================

11. 설계 업데이트 내역 (2024-12-03)

11.1 주요 변경사항
- **필기 기능 통합**: 쓰기 기능에 텍스트 작성과 필기(주석) 기능 통합
- **파일 타입 확장**: recording, text, handwriting, annotation, converted_image로 세분화
- **주석 시스템 구축**: file_annotations 테이블 및 관련 API 추가
- **파일 변환 지원**: PDF, DOC, PPT → JPEG 변환 API 구현
- **사용량 제한 제거**: 무료 버전에서 파일 수/용량 제한 완전 제거
- **음성-쓰기 동기화**: 필기 시점과 음성 재생 시간 연결 저장 기능 추가
- **언어별 테마 자동 선택**: 국가/언어에 따른 5가지 테마 자동 매핑 시스템 추가

11.2 새로 추가된 API
- POST /api/v1/files/convert - 문서 파일 변환
- GET /api/v1/files/convert/{job_id} - 변환 상태 확인
- GET /api/v1/files/{file_id}/annotations - 주석 목록 조회
- POST /api/v1/files/{file_id}/annotations - 주석 추가
- PUT /api/v1/annotations/{annotation_id} - 주석 수정
- DELETE /api/v1/annotations/{annotation_id} - 주석 삭제
- GET /api/v1/subscription/info - 구독 정보 조회

11.3 데이터베이스 스키마 개선
- files 테이블에 original_file_type, thumbnail_url 필드 추가
- file_annotations 테이블 신규 생성 (주석 데이터 관리)
- audio_timestamp, linked_audio_file_id 필드 추가 (음성 동기화)
- usage_limits 테이블을 usage_stats로 변경 (제한 제거, 통계 목적)
- apps 테이블에 language_code, theme_preference 필드 추가 (언어별 테마 자동 선택)

11.4 서비스 레이어 확장
- ConversionService: 파일 변환 전담 서비스 추가
- AnnotationService: 주석 관리 전담 서비스 추가
- 기존 서비스들의 필기 기능 통합 대응
- 사용량 제한 시스템 제거로 단순화

================================================================================

이상으로 리튼(litten) 크로스플랫폼 노트 앱의 백엔드 설계를 완료했습니다.
이 설계서는 앱 ID 기반 인증, RESTful API, 파일 저장, 동기화, 보안과 함께
필기 기능 통합, 문서 변환, 주석 시스템 등 모든 핵심 백엔드 기능을 포괄하고 있습니다.